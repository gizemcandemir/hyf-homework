{"ast":null,"code":"var _jsxFileName = \"/Users/gizemcandemirkilicoglu/Documents/HackYourFuture/00-homework/hyf-homework/react/week4/github-user-search/src/Contexts/userContext.js\";\nimport React, { useState, useEffect, createContext } from \"react\";\nimport githubRequestSetting from \"../githubSettings.js\";\nconst UserContext = createContext();\n\nconst UserContextProvider = props => {\n  const [loading, setLoading] = useState(true);\n  const [query, setQuery] = useState(\"\");\n  const [userList, setUserList] = useState([]);\n  const [error, setError] = useState(\"\");\n\n  const handleQueryChange = e => {\n    setQuery(e.target.value);\n    console.log(query);\n  }; // const fetchUsers = async query => {\n  //   if (query !== \"\") {\n  //     setLoading(true);\n  //     const users = await fetch(url, githubRequestSetting)\n  // \t\t\t.then(data => {\n  // \t\t\t\tconsole.log(data)\n  // \t\t\t\tdata.json()\n  //       .catch(error => setError(error.message));\n  // \t\tsetUserList(users.items);\n  //     setLoading(false);\n  //   }\n  // };\n\n\n  const url = `https://api.github.com/search/users?q=${query}`;\n  useEffect(() => {\n    if (query !== \"\") {\n      setLoading(true);\n      fetch(url).then(data => data.json()).then(jsonResponse => setUserList(jsonResponse.items)).catch(error => setError(error.message));\n      setLoading(false);\n    }\n  }, [query]);\n  return React.createElement(UserContext.Provider, {\n    value: {\n      loading,\n      query,\n      userList,\n      handleQueryChange\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, props.children);\n};\n\nexport { UserContextProvider, UserContext };","map":{"version":3,"sources":["/Users/gizemcandemirkilicoglu/Documents/HackYourFuture/00-homework/hyf-homework/react/week4/github-user-search/src/Contexts/userContext.js"],"names":["React","useState","useEffect","createContext","githubRequestSetting","UserContext","UserContextProvider","props","loading","setLoading","query","setQuery","userList","setUserList","error","setError","handleQueryChange","e","target","value","console","log","url","fetch","then","data","json","jsonResponse","items","catch","message","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,QAA0D,OAA1D;AACA,OAAOC,oBAAP,MAAiC,sBAAjC;AACA,MAAMC,WAAW,GAAGF,aAAa,EAAjC;;AAEA,MAAMG,mBAAmB,GAAGC,KAAK,IAAI;AACpC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMe,iBAAiB,GAAGC,CAAC,IAAI;AAC9BN,IAAAA,QAAQ,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACA,GAHD,CANoC,CAWpC;AACC;AAEA;AACA;AACD;AACA;AACA;AAEC;AAED;AACC;AACA;AACD;;;AAEA,QAAMY,GAAG,GAAI,yCAAwCZ,KAAM,EAA3D;AAECR,EAAAA,SAAS,CAAC,MAAM;AAChB,QAAGQ,KAAK,KAAK,EAAb,EAAiB;AAChBD,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAc,MAAAA,KAAK,CAACD,GAAD,CAAL,CACEE,IADF,CACOC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADf,EAEEF,IAFF,CAEOG,YAAY,IAAId,WAAW,CAACc,YAAY,CAACC,KAAd,CAFlC,EAGEC,KAHF,CAGQf,KAAK,IAAIC,QAAQ,CAACD,KAAK,CAACgB,OAAP,CAHzB;AAICrB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAED;AACA,GAVQ,EAUN,CAACC,KAAD,CAVM,CAAT;AAYD,SACC,oBAAC,WAAD,CAAa,QAAb;AACC,IAAA,KAAK,EAAE;AACNF,MAAAA,OADM;AAENE,MAAAA,KAFM;AAGNE,MAAAA,QAHM;AAINI,MAAAA;AAJM,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQET,KAAK,CAACwB,QARR,CADD;AAYA,CArDD;;AAuDA,SAASzB,mBAAT,EAA8BD,WAA9B","sourcesContent":["import React, { useState, useEffect, createContext } from \"react\";\nimport githubRequestSetting from \"../githubSettings.js\";\nconst UserContext = createContext();\n\nconst UserContextProvider = props => {\n\tconst [loading, setLoading] = useState(true);\n\tconst [query, setQuery] = useState(\"\");\n\tconst [userList, setUserList] = useState([]);\n\tconst [error, setError] = useState(\"\");\n\n\tconst handleQueryChange = e => {\n\t\tsetQuery(e.target.value);\n\t\tconsole.log(query)\n\t};\n\n\t// const fetchUsers = async query => {\n  //   if (query !== \"\") {\n      \n  //     setLoading(true);\n  //     const users = await fetch(url, githubRequestSetting)\n\t// \t\t\t.then(data => {\n\t// \t\t\t\tconsole.log(data)\n\t// \t\t\t\tdata.json()\n\t\t\t\t\n  //       .catch(error => setError(error.message));\n\n\t// \t\tsetUserList(users.items);\n  //     setLoading(false);\n  //   }\n\t// };\n\t\n\tconst url = `https://api.github.com/search/users?q=${query}`;\n\n  useEffect(() => {\n\t\tif(query !== \"\") {\n\t\t\tsetLoading(true)\n\t\t\tfetch(url)\n\t\t\t\t.then(data => data.json())\n\t\t\t\t.then(jsonResponse => setUserList(jsonResponse.items))\n\t\t\t\t.catch(error => setError(error.message))\n\t\t\t\tsetLoading(false)\n\t\t\t\n\t\t}\n  }, [query]);\n\n\treturn (\n\t\t<UserContext.Provider\n\t\t\tvalue={{\n\t\t\t\tloading,\n\t\t\t\tquery,\n\t\t\t\tuserList,\n\t\t\t\thandleQueryChange\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</UserContext.Provider>\n\t);\n};\n\nexport { UserContextProvider, UserContext };\n"]},"metadata":{},"sourceType":"module"}